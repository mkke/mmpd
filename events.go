package mmpd

import "sync"

type Connected func(client *ReconnectingClient)
type Disconnected func(client *ReconnectingClient)
type SubsystemsChanged func(client *ReconnectingClient, subsystems []Subsystem)
type StatusChanged func(client *ReconnectingClient, status *Status)
type PlaylistChanged func(client *ReconnectingClient, playlist *Playlist)
type CurrentSongChanged func(client *ReconnectingClient, currentSong *CurrentSong)

// Code below generated by events-gen; DO NOT EDIT.


// ListenerSet provides synchronized access to a set of listeners
type ListenerSet[T comparable] struct {
	lock sync.RWMutex
	set  map[T]struct{}
}

func NewListenerSet[T comparable]() *ListenerSet[T] {
	return &ListenerSet[T]{
		set: make(map[T]struct{}),
	}
}

func (l *ListenerSet[T]) Add(e T) {
	l.lock.Lock()
	l.set[e] = struct{}{}
	l.lock.Unlock()
}

func (l *ListenerSet[T]) Remove(e T) {
	l.lock.Lock()
	delete(l.set, e)
	l.lock.Unlock()
}

func (l *ListenerSet[T]) Notify(notifyFn func(l T)) {
	l.lock.RLock()
	defer l.lock.RUnlock()

	for v := range l.set {
		notifyFn(v)
	}
}
type ConnectedListener struct {
    fn func(client *ReconnectingClient)
}

func (l *ConnectedListener) Connected(client *ReconnectingClient) {
    l.fn(client)
}

func NewConnectedListener(fn func(client *ReconnectingClient)) *ConnectedListener {
    return &ConnectedListener{fn: fn}
}

type DisconnectedListener struct {
    fn func(client *ReconnectingClient)
}

func (l *DisconnectedListener) Disconnected(client *ReconnectingClient) {
    l.fn(client)
}

func NewDisconnectedListener(fn func(client *ReconnectingClient)) *DisconnectedListener {
    return &DisconnectedListener{fn: fn}
}

type SubsystemsChangedListener struct {
    fn func(client *ReconnectingClient, subsystems []Subsystem)
}

func (l *SubsystemsChangedListener) SubsystemsChanged(client *ReconnectingClient, subsystems []Subsystem) {
    l.fn(client, subsystems)
}

func NewSubsystemsChangedListener(fn func(client *ReconnectingClient, subsystems []Subsystem)) *SubsystemsChangedListener {
    return &SubsystemsChangedListener{fn: fn}
}

type StatusChangedListener struct {
    fn func(client *ReconnectingClient, status *Status)
}

func (l *StatusChangedListener) StatusChanged(client *ReconnectingClient, status *Status) {
    l.fn(client, status)
}

func NewStatusChangedListener(fn func(client *ReconnectingClient, status *Status)) *StatusChangedListener {
    return &StatusChangedListener{fn: fn}
}

type PlaylistChangedListener struct {
    fn func(client *ReconnectingClient, playlist *Playlist)
}

func (l *PlaylistChangedListener) PlaylistChanged(client *ReconnectingClient, playlist *Playlist) {
    l.fn(client, playlist)
}

func NewPlaylistChangedListener(fn func(client *ReconnectingClient, playlist *Playlist)) *PlaylistChangedListener {
    return &PlaylistChangedListener{fn: fn}
}

type CurrentSongChangedListener struct {
    fn func(client *ReconnectingClient, currentSong *CurrentSong)
}

func (l *CurrentSongChangedListener) CurrentSongChanged(client *ReconnectingClient, currentSong *CurrentSong) {
    l.fn(client, currentSong)
}

func NewCurrentSongChangedListener(fn func(client *ReconnectingClient, currentSong *CurrentSong)) *CurrentSongChangedListener {
    return &CurrentSongChangedListener{fn: fn}
}

